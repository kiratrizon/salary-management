#!/usr/bin/env node
import './main/express/server/public.mjs';
import MigrationRunner from './main/database/MigrationRunner.mjs';
import fs from 'fs';
import path from 'path';
import { Command } from 'commander';
import { spawn } from 'child_process';
import crypto from 'crypto';
import DatabaseSeeder from './main/database/seeders/DatabaseSeeder.mjs';
import inquirer from 'inquirer';

const defaultStubPath = stubPath();

const program = new Command();

class Generator {
    constructor() {
        this.controllersPath = controllerPath();
        this.modelsPath = basePath('models');
        this.migrationsPath = databasePath('migrations');
    }

    // Create a controller
    createController(name, resource = false) {
        const controllerStub = path.join(defaultStubPath, resource ? 'ResourceController.stub' : 'Controller.stub');
        const controllerContent = fs.readFileSync(controllerStub, 'utf-8').replace(/{{ ControllerName }}/g, name);

        const controllerPath = path.join(this.controllersPath, `${name}.mjs`);
        this.#writeFile(controllerPath, controllerContent);

        console.log(`Controller created at ${controllerPath}`);
    }

    // Create a model
    createModel(name, createMigration = false) {
        const modelStub = path.join(defaultStubPath, 'Model.stub');
        let modelContent = fs.readFileSync(modelStub, 'utf-8').replace(/{{ ModelName }}/g, name);

        const modelPath = path.join(this.modelsPath, `${name}.mjs`);
        this.#writeFile(modelPath, modelContent);

        console.log(`Model created at ${modelPath}`);

        if (createMigration) {
            this.createMigration(generateTableNames(name));
        }
    }

    // Create a migration
    createMigration(name, alter = false) {
        const tableName = name;
        const migrationStub = path.join(defaultStubPath, `Migration${alter ? 'Alter' : ''}.stub`);
        let migrationContent = fs.readFileSync(migrationStub, 'utf-8').replace(/{{ tableName }}/g, tableName);

        const migrationFileName = `${Date.now()}_${alter ? 'alter' : 'create'}_${tableName.toLowerCase()}_table.mjs`; // Use timestamp for uniqueness
        const migrationPath = path.join(this.migrationsPath, migrationFileName);

        this.#writeFile(migrationPath, migrationContent);
        console.log(`Migration created at ${migrationPath}`);
    }

    // Write content to a file and ensure directories exist
    #writeFile(filePath, content) {
        const dir = path.dirname(filePath);
        if (!fs.existsSync(dir)) {
            fs.mkdirSync(dir, { recursive: !0 });
        }
        fs.writeFileSync(filePath, content);
    }

    generateMiddleware(middlename) {
        const middlewareStub = path.join(defaultStubPath, 'Middleware.stub');
        const middlewareContent = fs.readFileSync(middlewareStub, 'utf-8').replace(/{{ MiddlewareName }}/g, middlename);

        const middlewarePath = path.join(appPath('Middlewares'), `${middlename}.mjs`);
        this.#writeFile(middlewarePath, middlewareContent);

        console.log(`Middleware created at ${middlewarePath}`);
    }
    generateJwtSecret() {
        return crypto.randomBytes(64).toString('hex');
    }
    writeToEnvFiles(secretKey) {
        const envFilePath = path.resolve('.env');
        const exampleFilePath = path.resolve('.env.example');

        const newEnvContent = `JWT_SECRET_KEY=${secretKey}\n`;

        // Write to .env
        if (fs.existsSync(envFilePath)) {
            fs.appendFileSync(envFilePath, newEnvContent, { encoding: 'utf8' });
            console.log(`Added JWT_SECRET_KEY to .env`);
        } else {
            fs.writeFileSync(envFilePath, newEnvContent, { encoding: 'utf8' });
            console.log(`Created .env and added JWT_SECRET_KEY`);
        }

        // Write to .env.example
        if (fs.existsSync(exampleFilePath)) {
            fs.appendFileSync(exampleFilePath, newEnvContent, { encoding: 'utf8' });
            console.log(`Added JWT_SECRET_KEY to .env.example`);
        } else {
            fs.writeFileSync(exampleFilePath, newEnvContent, { encoding: 'utf8' });
            console.log(`Created .env.example and added JWT_SECRET_KEY`);
        }
    }
}

const generator = new Generator();

// Command to generate a controller
program
    .command('make:controller <name>')
    .option('--resource', 'Generate a resource controller')
    .action((name, options) => {
        generator.createController(name, options.resource);
        process.exit(0);
    });

// Add the make:jwt_secret command
program
    .command('make:jwt_secret')
    .description('Generate a JWT secret key and add it to .env and .env.example')
    .action(() => {
        const secretKey = generator.generateJwtSecret();
        console.log(`Generated JWT_SECRET_KEY: ${secretKey}`);
        generator.writeToEnvFiles(secretKey);
        process.exit(0);
    });
// Command to generate a middleware
program
    .command('make:middleware <name>')
    .description('Generates a middleware for a given name')
    .action((name) => {
        generator.generateMiddleware(name);
        process.exit(0);
    });
// Command to generate a migration
program
    .command('make:migration <name>')
    .option('--alter', 'Generate an ALTER TABLE migration')
    .action((name, options) => {
        if (options.alter) {
            generator.createMigration(name, !0);
        } else {
            generator.createMigration(name);
        }
        process.exit(0);
    });
// Command to generate a model
program
    .command('make:model <name>')
    .option('--mc', 'Generate migration file as well')
    .action((name, options) => {
        generator.createModel(name, options.mc);
        process.exit(0);
    });
// Command to run migrations
program
    .command('migrate')
    .option('--seed', 'Seed the database after migration')
    .description('Run all migrations')
    .action(async (options) => {
        try {
            const runner = new MigrationRunner();
            const notExist = await runner.isSchemaNotExist();
            if (notExist) {
                const { proceed } = await inquirer.prompt([
                    {
                        type: 'confirm',
                        name: 'proceed',
                        message: `Database "${notExist}" does not exist. Do you want to add it?`,
                        default: true,
                    }
                ]);

                if (!proceed) {
                    console.log('Migration cancelled.');
                    process.exit(0);
                } else {
                    await runner.createSchema();
                    console.log(`Database "${notExist}" created successfully.`);
                    await runner.migrateInit();
                }
            }
            await runner.run();
        } catch (e) {
            console.error('Migration failed:', e);
        }
        if (options.seed) {
            try {
                const seeder = new DatabaseSeeder();
                await seeder.run();
            } catch (e) {
                console.error('Seeding failed:', e);
            }
        }
        process.exit(0);
    });

program
    .command('migrate:fresh')
    .option('--seed', 'Seed the database after migration')
    .description('Drop all tables and run all migrations from scratch')
    .action(async (options) => {
        try {
            const runner = new MigrationRunner();
            const notExist = await runner.isSchemaNotExist();
            if (notExist) {
                const { proceed } = await inquirer.prompt([
                    {
                        type: 'confirm',
                        name: 'proceed',
                        message: `Database "${notExist}" does not exist. Do you want to add it?`,
                        default: true, // true means "Yes" is the default option
                    }
                ]);

                if (!proceed) {
                    console.log('Migration cancelled.');
                    process.exit(0);
                } else {
                    await runner.createSchema();
                    console.log(`Database "${notExist}" created successfully.`);
                    await runner.migrateInit();
                }
            }
            await runner.dropAllTables();
        } catch (e) {
            console.error('Migration failed:', e);
        }
        if (options.seed) {
            try {
                const seeder = new DatabaseSeeder();
                await seeder.run();
            } catch (e) {
                console.error('Seeding failed:', e);
            }
        }
        process.exit(0);
    });

program
    .command('migrate:refresh')
    .option('--seed', 'Seed the database after migration')
    .description('Rollback all migrations and re-run them')
    .action(async (options) => {
        try {
            const runner = new MigrationRunner();
            const notExist = await runner.isSchemaNotExist();
            if (notExist) {
                const { proceed } = await inquirer.prompt([
                    {
                        type: 'confirm',
                        name: 'proceed',
                        message: `Database "${notExist}" does not exist. Do you want to add it?`,
                        default: true, // true means "Yes" is the default option
                    }
                ]);

                if (!proceed) {
                    console.log('Migration cancelled.');
                    process.exit(0);
                } else {
                    await runner.createSchema();
                    console.log(`Database "${notExist}" created successfully.`);
                    await runner.migrateInit();
                }
            }
            await runner.rollback();
        } catch (e) {
            console.error('Migration refresh failed:', e);
        }
        if (options.seed) {
            try {
                const seeder = new DatabaseSeeder();
                await seeder.run();
            } catch (e) {
                console.error('Seeding failed:', e);
            }
        }
        process.exit(0);
    });

// Command to start the development server
program
    .command('serve')
    .description('Run the application in development mode')
    .action(() => {
        console.log('Starting the development server...');

        const devProcess = spawn('npm', ['run', 'dev'], { stdio: 'inherit', shell: !0 });

        devProcess.on('close', (code) => {
            if (code === 0) {
                console.log('Development server stopped successfully.');
            } else {
                console.error(`Development server exited with code ${code}.`);
            }
        });
    });

program.parse(process.argv);
